/*

Folder name = NKNVELSC (Non-killable, non-viable, Etheria-like smart contract)

WARNING! This test contract is live on the chain, can't be killed but is FATALLY BUGGED.
______ _____   _   _ _____ _____  ______ _   ___   __
|  _  \  _  | | \ | |  _  |_   _| | ___ \ | | \ \ / /
| | | | | | | |  \| | | | | | |   | |_/ / | | |\ V / 
| | | | | | | | . ` | | | | | |   | ___ \ | | | \ /  
| |/ /\ \_/ / | |\  \ \_/ / | |   | |_/ / |_| | | |  
|___/  \___/  \_| \_/\___/  \_/   \____/ \___/  \_/  
                                                     
There is no wrapper. There is no official support/website. 
Anything you may see for Etheria 0x01483 is a SCAM!
No wrapper or anything else can fix the underlying bug.
It is FATAL, not cosmetic. Anyone can accept bids on any tile at any time. 
This means anyone can place a 0.01 ETH bid on your tile and immediately accept it. 

Etheria v0.7
Block 383700
Oct-14-2015 06:08:09 PM +UTC
0x0148368e9efd8d6a5dd56134cd2b3f941e10d953

Cyrus' note (2022-03-07): I've been unable to get an exact source-to-bytecode match. 
However, exhaustive function hash analysis of the bytecode on the chain produces these results 
(i.e. these are the functions the bytecode on the chain definitively has).
{ 
	"a5ffca0e-acceptOffer(uint8,uint8,uint8)": true,
    "46c52b1a-blockHexCoordsValid(int8,int8)": true,
    "8cae1374-editBlock(uint8,uint8,uint256,int8[5])": true, 					// The last Github commit before this contract was deployed has int8[7] instead
	"959eac47-farmTile(uint8,uint8)": true,
    "fa93019c-getBlocks(uint8,uint8)": true,
	"049b7852-getElevations()": true,
    "6a864559-getOfferers(uint8,uint8)": true,
    "c7dafc78-getOffers(uint8,uint8)": true,
 	"a0e67e2b-getOwners()": true,
    "4b42d208-getUint8FromByte32(bytes32,uint8)": true,
	"54746dac-initBlockDef(uint8,int8[3][8],int8[3][])": true,
	"3f40a42b-initOccupado(uint256,uint256)": true,
	"5f264591-initializeTiles(uint8,uint8[17])": true, 							// The first Github commit after this contract was deployed has initTiles(uint8,uint8[17])
    "6266b514-makeOffer(uint8,uint8)": true,
    "a713081c-rejectOffer(uint8,uint8,uint8)": true,
    "edffcd57-retractOffer(uint8,uint8)": true,
																				// The first Github commit after this contract was deployed has setInitializer
    "85c574f3-touchesAndAvoidsOverlap(uint8,uint8,int8,int8,int8,int8)": true, 	// The last Github commit before this contract was deployed has touchesAnother(...)
    "b3955935-wouldFallOutside(int8,int8,int8)": true,
																				// The last Github commit before this contract was deployed has wouldOverlap(...)
}

The full true/false analysis is (i.e. this shows what was analyzed and was *and* WAS NOT found in the bytecode): 
{
    "address": "0x0148368e9efd8d6a5dd56134cd2b3f941e10d953",
    "blockNumber": 383700,
    "54385526-setStatus(uint8,uint8,string)": false,
    "2ef761d3-buyTile(uint8,uint8)": false,
    "8cae1374-editBlock(uint8,uint8,uint256,int8[5])": true,
    "f2a75fe4-empty()": false,
    "90fd53ec-farmTile(uint8,uint8,int8)": false,
    "fa93019c-getBlocks(uint8,uint8)": true,
    "8435be4b-getLastFarm(uint8,uint8)": false,
    "2d49ffcd-getLocked()": false,
    "a55cab95-getName(uint8,uint8)": false,
    "e039e4a1-getOwner(uint8,uint8)": false,
    "d39eb301-getStatus(uint8,uint8)": false,
    "182db370-getWhatHappened()": false,
    "41c0e1b5-kill()": false,
    "10c1952f-setLocked()": false,
    "93eec1fb-setName(uint8,uint8,string)": false,
    "7d5fec5a-setOwner(uint8,uint8,address)": false,
    "a4741f48-acceptOffer(uint8,uint8,uint8,uint256)": false,
    "7f40458a-deleteOffer(uint8,uint8,uint8,uint256)": false,
    "959eac47-farmTile(uint8,uint8)": true,
    "6a864559-getOfferers(uint8,uint8)": true,
    "c7dafc78-getOffers(uint8,uint8)": true,
    "4b42d208-getUint8FromByte32(bytes32,uint8)": true,
    "6266b514-makeOffer(uint8,uint8)": true,
    "a5ffca0e-acceptOffer(uint8,uint8,uint8)": true,
    "a713081c-rejectOffer(uint8,uint8,uint8)": true,
    "edffcd57-retractOffer(uint8,uint8)": true,
    "a0e67e2b-getOwners()": true,
    "049b7852-getElevations()": true,
    "54746dac-initBlockDef(uint8,int8[3][8],int8[3][])": true,
    "f25e675d-initElevations(uint8,uint8[17])": false,
    "5c24b074-setInitializer(address)": false,
    "46c52b1a-blockHexCoordsValid(int8,int8)": true,
    "3f40a42b-initOccupado(uint256,uint256)": true,
    "d6c13297-initTiles(uint8,uint8[17])": false,
    "85c574f3-touchesAndAvoidsOverlap(uint8,uint8,int8,int8,int8,int8)": true,
    "b3955935-wouldFallOutside(int8,int8,int8)": true,
    "7203fb00-editBlock(uint8,uint8,uint256,int8[7])": false,
    "5f264591-initializeTiles(uint8,uint8[17])": true,
    "e87305eb-touchesAnother(uint8,uint8,int8,int8,int8,int8)": false,
    "a89425ab-wouldOverlap(uint8,uint8,int8,int8,int8,int8)": false,
    "0a786f34-getIlliquidBalance()": false,
    "8ad40912-getLiquidBalance()": false,
    "74ca9fbe-retrieveLiquidBalance()": false,
    "a364c21f-getBlocksForTile(uint8,uint8)": false,
    "bd9a548b-getPrices()": false,
    "3eb032cc-initializeRow(uint8,uint8[17])": false,
    "1a0cda6f-addBlock(uint8,uint8,int8[7])": false,
    "17513d49-initializeElevations(uint8,uint8[17])": false,
    "cb7b1469-initializeOwners(uint8)": false,
    "2f6d498f-initializePrices(uint8)": false,
    "a0ad10a6-initializeOwners(uint8[])": false,
    "d810612b-setElevations(uint8,uint8[33])": false,
    "1a092541-getDescription()": false,
    "232a8ec6-getDescription(uint8,uint8)": false,
    "7ec843dd-getDescriptor(uint8,uint8)": false,
    "4166c1fd-getElevation(uint8,uint8)": false,
    "6961807e-setDescriptor(uint8,uint8,address)": false,
    "0878bc51-getAttachesto(uint8)": false,
    "1bcf5758-getOccupies(uint8)": false,
    "d87a1166-initAttachesto(uint8,int8[48])": false,
    "e579763b-initOccupies(uint8,int8[24])": false,
    "57f10d71-initElevations(uint8,uint8[33])": false,
    "6f366805-makeOffer(uint8,uint8,uint80)": false,
    "dba69519-initializeTiles(uint8[],uint8[17])": false,
    "getLockedResult": null
}

The following source code is a hybrid between the prior Github commit and the Github commit immediately afterwards.
The function hashes match up perfectly and the bytecode comparison looks like this (solidity 0.1.5 with default optimization)...

on-chain: 
compiled: 0x606060405236156100da5760e060020a6000350463049b785281146100dc5780633f40a42b146101e657806346c52b1a146102205780634b42d2081461028857806354746dac146102ae5780635f2645911461030c5780636266b5141461039d5780636a864559146103f957806385c574f3146104975780638cae137414610626578063959eac47146106a7578063a0e67e2b146106fb578063a5ffca0e14610810578063a713081c14610991578063b3955935146109e5578063c7dafc7814610ab4578063edffcd5714610b4a578063fa93019c14610bde575b005b610cac612420604051908101604052806011905b610220604051908101604052806011905b6000815260200190600190039081610101579050508152602001906001900390816100f05750506040805161242081019091526011815b610220604051908101604052806011905b600081526020019060019003908161014957905050815260200190600190039081610138575060009050805b60005460ff9081169083161015611026575060005b60005460ff908116908216101561102e576001816011811015610002576055020182601181101561000257600502015460ff1683826011811015610002576020020151836011811015610002575060208402015260010161018a565b6100da600435602435600060411981805b6042600084900b13611d725760028360000b0760000b6000141515611d7a576031199350611d80565b610cf16004356024355b6000600060008360000b60201913158015610249575060218460000b13155b15610f085760028460000b0760000b6000141515610fa1578460000b6031191315801561027a575060318560000b13155b15610efb5760019250610f00565b610d036004356024355b60006000600060008460ff166000141561104657859250611058565b6040805161010081019091526100da90600480359161032490602460086000835b82821015610d1a576040805160608181019092529083810286019060039083908390808284378201915050505050815260200190600101906102cf565b604080516102208082019092526100da91600480359290916102449190602490601190839083908082843750909550505050505060005b60005460ff90811690821610156103f457818160118110156100025760200201516001826011811015610002576055020160005084601181101561000257909060050201600050805460ff19169091179055600101610343565b6100da6004356024356000662386f26fc100003410806103c6575069ffffffffffffffffffff34115b1561156257346000146103f457604051600160a060020a03331690600090349082818181858883f150505050505b505050565b610e566004356024356040805160208101909152600081526001836011811015610002575060558402018260118110156100025790906005020160005060010180546040805160208381028201810190925282815292919083018282801561048b57602002820191906000526020600020905b8154600160a060020a031681526001919091019060200180831161046c575b5050505050905061155c565b610cf160043560243560443560643560843560a435600080808080808080806105a78d820b601481101561000257600a026105a8019850505b60088760ff161015612708578b888860088110156100025781015460000b90910190886008811015610002578101805460ff191660f860020a9384029390930492909217909155508a8888600881101561000257810154610100900460000b909101908860088110156100025701805461ff00191660f860020a9283029290920461010002919091179055600260008c810b91909107810b1480159061059557506002888860088110156100025701546101009004600090810b810b91909107810b14155b156105d2578787600881101561000257015460000b600101888860088110156100025701805460ff191660f860020a928302929092049190911790555b8988886008811015610002578082015462010000900460000b909201916008811015610002570160005060026101000a81548160ff021916908360f860020a908102040217905550600196909601956104d0565b6040805160a08181019092526100da916004803592602435926044359291610104916064906005908390839080828437509095505050505050600160a060020a03331660018560118110156100025750605586020184601181101561000257909060050201600050546101009004600160a060020a031614611420576110a4565b6100da600435602435600080600160a060020a03331660018560118110156100025750605586020184601181101561000257909060050201600050546101009004600160a060020a0316146110aa576110a4565b610cac612420604051908101604052806011905b610220604051908101604052806011905b60008152602001906001900390816107205790505081526020019060019003908161070f5750506040805161242081019091526011815b610220604051908101604052806011905b600081526020019060019003908161076857905050815260200190600190039081610757575060009050805b60005460ff9081169083161015611026575060005b60005460ff908116908216101561103a57600181601181101561000257605502018260118110156100025760050201546101009004600160a060020a03168382601181101561000257602002015183601181101561000257506020840201526001016107a9565b6100da60043560243560443560018360118110156100025750605584020182601181101561000257909060050201600050546101009004600160a060020a031660006001856011811015610002575060558602018460118110156100025790906005020160005060020180548490811015610002579060005260206000209001600050546040516000818181858888f15060019350869250505060118110156100025750605584020182601181101561000257909060050201600050600101805482908110156100025750600090815260209020810154600160a060020a03166001846011811015610002575060558502018360118110156100025790906005020160005080546101009290920274ffffffffffffffffffffffffffffffffffffffff001990921691909117905560018360118110156100025750605584020182601181101561000257909060050201600050600101805460008083559182526020909120611c16918101905b8082111561115f576000815560010161097d565b6100da600435602435604435600160a060020a03331660018460118110156100025750605585020183601181101561000257909060050201600050546101009004600160a060020a0316146119a9576103f4565b610cf160043560243560443560008080805b60088160ff1610156126e2576105a7600088900b601481101561000257600a020160005060010181600881101561000257600089810b600a81029092016105a80154900b94506105a79150601481101561000257600a0201600050600101816008811015610002570160005060019054906101000a900460000b9150815060028560000b0760000b600014158015610a99575060028260000b0760000b600014155b15610aa657600192909201915b6126f186840186840161022a565b610e566004356024356040805160208101909152600081526001836011811015610002575060558402018260118110156100025790906005020160005060020180546040805160208381028201810190925282815292919083018282801561048b57602002820191906000526020600020905b816000505481526020019060010190808311610b27575b5050505050905061155c565b6100da60043560243560005b6001836011811015610002576055020182601181101561000257600502016001015460ff821610156103f457600160a060020a0333166001846011811015610002576055020183601181101561000257600502016001018054839081101561000257600091825260209091200154600160a060020a031614156119a1576119a18383836119b0565b610ea0600435602435604080516020810190915260008152600183601181101561000257605502016000508260118110156100025760050201600050600301600050805480602002602001604051908101604052809291908181526020016000905b82821015611555576000848152602081206040805160a08101918290529291850191600591908390855b825461010083900a900460000b815260206001928301818104948501949093039092029101808411610c6a579050505050505081526020019060010190610c40565b6040516000826011835b81841015610ce1576020840283015161022080838184600060046042f1509050019260010192610cb6565b9250505091505060405180910390f35b60408051918252519081900360200190f35b6040805160ff929092168252519081900360200190f35b5050604080518535870180356020818102840181019094528083529597968301959194508201925090819060009085015b82821015610d8857604080516060818101909252908381028701906003908390839080828437820191505050505081526020019060010190610d4b565b5093955050505050506000808080866105a78160148110156100025750600a90910201805460ff1916881790555b60088460ff161015611c6057600092505b60038360ff161015611ca257858460088110156100025760200201518360038110156100025760200201516105a7886014811015610002575050600a88026105a801856008811015610002579090016000508460038110156100025760208082049092019190066101000a81548160ff021916908360f860020a90810204021790555060019290920191610dc7565b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600302600f01f1509050019250505060405180910390f35b60405180806020018281038252838181518152602001915080516000925b81841015610eea5760208481028401015160a08083818460006004601ef1509050019260010192610ebe565b925050509250505060405180910390f35b600092505b505092915050565b849150600082810b1215610f1f5760001991909102905b5082600081810b1215610f3157600019025b60008460000b12158015610f49575060008560000b12155b80610f65575060008460000b128015610f65575060008560000b135b15610fc65760028460000b0760000b6000141515610ffc57602160028260000b0560038460000b050160000b131515610efb5760019250610f00565b8460000b6030191315801561027a57506031600086900b13610efb5760019250610f00565b60028460000b0760000b60001415610ffc57602160028260000b0560038460000b050160000b131515610efb5760019250610f00565b602160026001830360000b0560038460010160000b050160000b131515610efb5760019250610f00565b509092915050565b60019190910190610175565b60019190910190610794565b6002850260400360100a60ff16860692505b5050600292909202603e0360100a60ff168083069092039190910492915050565b4360018560118110156100025750605586020184601181101561000257909060050201600050600401555b50505050565b6110e06001856011811015610002575060558602018460118110156100025790906005020160005060040154430310156110e3576110a4565b505043600019014060005b600a8160ff161015611079576005600185601181101561000257506055860201846011811015610002579090600502016000506003018054918201808255918290801582901161114f5760008381526020902061114f91810190830161097d565b5050505060206111638383610292565b5090565b60ff1606600185601181101561000257506055860201846011811015610002579090600502016000506003016001808760118110156100025790906055020160005086601181101561000257505081546000198101915081101561000257906000526020600020900160005060006101000a81548160ff021916908360f860020a9081020402179055506000600160005085601181101561000257506055860201846011811015610002579090600502016000506003016001808760118110156100025790906055020160005086601181101561000257505081546000198101915081101561000257906000526020600020900160005060016101000a81548160ff021916908360f860020a9081020402179055506000600160005085601181101561000257506055860201846011811015610002579090600502016000506003016001808760118110156100025790906055020160005086601181101561000257505081546000198101915081101561000257906000526020600020900160005060026101000a81548160ff021916908360f860020a90810204021790555060001960016000508560118110156100025750605586020184601181101561000257909060050201600050600301600180876011811015610002579090605502016000508660118110156100025750508154808401915081101561000257906000526020600020900160005060036101000a81548160ff021916908360f860020a9081020402179055506000600160005085601181101561000257506055860201846011811015610002579090600502016000506003016001808760118110156100025790906055020160005086601181101561000257505081546000198101915081101561000257906000526020600020900160005060046101000a81548160ff021916908360f860020a9081020402179055506001016110ee565b60018460118110156100025750605585020183601181101561000257909060050201600050600301805483908110156100025750600090815260208120830154810b900b8152806001856011811015610002575060558602018460118110156100025790906005020160005060030180548490811015610002579060005260206000209001600050906001820190600590839091602002820160005b8382111561150057835183826101000a81548160ff021916908360f860020a90810204021790555092602001926001016020816000010492830192600103026114bc565b801561152d5782816101000a81549060ff0219169055600101602081600001049283019260010302611500565b505061154e9291505b8082111561115f57805460ff19168155600101611536565b50506110a4565b5050505090505b92915050565b607d600184601181101561000257506055850201836011811015610002579090600502016000505460ff16108015906115ce5750600060018460118110156100025750605585020183601181101561000257909060050201600050546101009004600160a060020a0316145b1561160857670de0b6b3a7640000341461176857604051600160a060020a03331690600090349082818181858883f19350505050506103f4565b600a600184601181101561000257506055850201836011811015610002579090600502016000506001015410156103f4575060005b60018360118110156100025750605584020182601181101561000257600502016000506001015460ff821610156117e357600160a060020a0333166001846011811015610002576055020160005083601181101561000257600502016000506001018054839081101561000257600091825260209091200154600160a060020a0316141561183957600160a060020a0333166000600185601181101561000257605502018150846011811015610002579090600502016000506002018054849081101561000257908252602082206040519101549082818181858883f1935050505050346001600050846011811015610002575060558502018360118110156100025790906005020160005060020180548390811015610002576020600090812092905201556103f4565b6040516105a654600160a060020a031690600090349082818181858883f1935050505050336001600050846011811015610002575060558502018360118110156100025790906005020160005080546101009290920274ffffffffffffffffffffffffffffffffffffffff00199092169190911790556103f4565b60018360118110156100025760550201600050826011811015610002579090600502016000506001908101805491820180825582801582901161184157818360005260206000209182019101611841919061097d565b60010161163d565b505050506001600050836011811015610002575060558402018260118110156100025790906005020160005060020180546001810180835590919082801582901161189f5781836000526020600020918201910161189f919061097d565b505050503360016000508460118110156100025750605585020183601181101561000257909060050201600050600190810190808660118110156100025790906055020160005085601181101561000257505081546000198101915081101561000257508054600091825260209091200160001901805473ffffffffffffffffffffffffffffffffffffffff1916909117905534600184601181101561000257506055850201836011811015610002579090600502016000506002016001808660118110156100025790906055020160005085601181101561000257505081546000198101915081101561000257906000526020600020900160005055505050565b600101610b56565b6103f48383835b60006001846011811015610002576055020183601181101561000257600502016001018054839081101561000257908252602082200154600160a060020a0316816001866011811015610002576055020185601181101561000257600502016002018054859081101561000257908252602082206040519101549082818181858883f1506001935087925050506011811015610002576055020183601181101561000257600502016001018054839081101561000257906000526020600020900160006101000a815490600160a060020a030219169055600160005084601181101561000257605502018360118110156100025760050201600201805483908110156100025790600052602060002090016000506000905550600181015b6001846011811015610002576055020183601181101561000257600502016001015460ff82161015612c15576001846011811015610002576055020183601181101561000257600502016001018054829081101561000257600091825260209091200154600160a060020a03166001856011811015610002576055020184601181101561000257600502016001018054600019840190811015610002576000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff191690911790556001846011811015610002576055020183601181101561000257600502016002018054829081101561000257906000526020600020900160005054600185601181101561000257605502018460118110156100025760050201600201805460001984019081101561000257906000526020600020900160005055600101611ace565b5060018360118110156100025750605584020182601181101561000257909060050201600050600201805460008083559182526020909120611c5a9181019061097d565b506103f4565b84516105a7886014811015610002575050600a88026105b001805482825582908015829011611cae57818360005260206000209182019101611cae919061097d565b60019390930192610db6565b50505050600091505b84518260ff161015611d5d575060005b60038160ff161015611d66578482815181101561000257906020019060200201518160038110156100025760200201516105a7886014811015610002575050600a88026105b001805484908110156100025760009182526020909120018260038110156100025760208082049092019190066101000a81548160ff021916908360f860020a908102040217905550600101611cc7565b50505050505050565b60019190910190611cb7565b505050505050565b60301993505b6020198360000b12158015611d99575060218360000b13155b15611fa7575b6031600085900b136120985761066f86601181101561000257909060110201600050856011811015610002579090016000508054600181018083559091908280158290116120a4576000838152602090206120a491810190830161097d565b505050508361066f600050876011811015610002576011020160005086601181101561000257909001600050600161066f8960118110156100025790906011020160005088601181101561000257505081546000198101915081101561000257906000526020600020900160005060006101000a81548160ff021916908360f860020a9081020402179055508261066f6000508760118110156100025790906011020160005086601181101561000257909001600050600161066f8960118110156100025790906011020160005088601181101561000257505081546000198101915081101561000257906000526020600020900160005060016101000a81548160ff021916908360f860020a90810204021790555060001961066f6000508760118110156100025790906011020160005086601181101561000257909001600050600161066f896011811015610002579090601102016000508860118110156100025750508154808401915081101561000257906000526020600020900160005060026101000a81548160ff021916908360f860020a9081020402179055505b600193909301925b6031600085900b1361209857839150600082810b1215611fca5760001991909102905b5081600081810b1215611fde575060001982025b60008360000b12158015611ff6575060008460000b12155b80612012575060008360000b128015612012575060008460000b135b156122445760028360000b0760000b60001415156122c457602160028260000b0560038460000b050160000b1315156124cd5761066f86601181101561000257909060110201600050856011811015610002579090016000508054600181018083559091908280158290116123385760008381526020902061233891810190830161097d565b600192909201916101f7565b505050508361066f600050876011811015610002576011020160005086601181101561000257909001600050600161066f89601181101561000257909060110201600050886011811015610002575050815460001981019150811015610002576000918252602090912001805460ff191660f860020a928302929092049190911790558261066f8760118110156100025790906011020160005086601181101561000257909001600050600161066f8960118110156100025790906011020160005088601181101561000257505081546000198101915081101561000257906000526020600020900160005060016101000a81548160ff021916908360f860020a90810204021790555060001961066f6000508760118110156100025790906011020160005086601181101561000257909001600050600161066f896011811015610002579090601102016000508860118110156100025750508154808401915081101561000257906000526020600020900160005060026101000a81548160ff021916908360f860020a90810204021790555060019390930192611d9f565b60028360000b0760000b6000141561266e57602160028260000b0560038460000b050160000b1315156126695761066f86601181101561000257909060110201600050856011811015610002579090016000508054600181018083559091908280158290116124d2576000838152602090206124d291810190830161097d565b602160026001830360000b0560038460010160000b050160000b1315156126695761066f86601181101561000257909060110201600050856011811015610002579090016000508054600181018083559091908280158290116124d2576000838152602090206124d291810190830161097d565b505050508361066f600050876011811015610002576011020160005086601181101561000257909001600050600161066f89601181101561000257909060110201600050886011811015610002575050815460001981019150811015610002576000918252602090912001805460ff191660f860020a928302929092049190911790558261066f8760118110156100025790906011020160005086601181101561000257909001600050600161066f8960118110156100025790906011020160005088601181101561000257505081546000198101915081101561000257906000526020600020900160005060016101000a81548160ff021916908360f860020a90810204021790555060001961066f6000508760118110156100025790906011020160005086601181101561000257909001600050600161066f896011811015610002579090601102016000508860118110156100025750508154808401915081101561000257906000526020600020900160005060026101000a81548160ff021916908360f860020a9081020402179055505b612669565b505050508361066f6000508760118110156100025790906011020160005086601181101561000257909001600050600161066f89601181101561000257909060110201600050886011811015610002575050815460001981019150811015610002576000918252602090912001805460ff191660f860020a928302929092049190911790558261066f8760118110156100025790906011020160005086601181101561000257909001600050600161066f8960118110156100025790906011020160005088601181101561000257505081546000198101915081101561000257906000526020600020900160005060016101000a81548160ff021916908360f860020a90810204021790555060001961066f6000508760118110156100025790906011020160005086601181101561000257909001600050600161066f896011811015610002579090601102016000508860118110156100025750508154808401915081101561000257906000526020600020900160005060026101000a81548160ff021916908360f860020a9081020402179055505b611f9f565b602160026001830360000b0560038460010160000b050160000b131515611f9f5761066f8660118110156100025790906011020160005085601181101561000257909001600050805460018101808355909190828015829011611dfe57600083815260209020611dfe91810190830161097d565b600093505b5050509392505050565b151561270057600193506126e7565b6001016109f7565b6105a760008e900b601481101561000257600a02016000506009019550600094505b855460ff861610156128de578b868881548110156100025760008281526020812083549083015490910b909301928110156100025760206000208101805460ff191660f860020a948502949094049390931790925580548d9250899081101561000257906000526020600020900160005060019054906101000a900460000b018688815481101561000257906000526020600020900160005060016101000a81548160ff021916908360f860020a90810204021790555060028b60000b0760000b60001415801561282b575060028688815481101561000257906000526020600020900160005060019054906101000a900460000b60000b0760000b600014155b1561287d57858781548110156100025760009182526020822001548754910b6001019087908990811015610002576000918252602090912001805460ff191660f860020a928302929092049190911790555b8986888154811015610002578154600083815260208120830154620100009004900b9093019281101561000257505060206000208801805462ff0000191660f860020a9283029290920462010000029190911790556001949094019361272a565b855460089350839011156128f157855492505b600091505b828260ff161015612a60575060005b61066f8f6011811015610002579090601102016000508e6011811015610002570160005054811015612a725760088260ff16108015612990575061066f8f601181101561000257601102016000508e60118110156100025701600050818154811015610002576000918252602082200154810b900b88836008811015610002570154600090810b900b145b80156129f0575061066f8f601181101561000257601102016000508e60118110156100025701805482908110156100025760009182526020822001546101009004810b900b888360088110156100025701546101009004600090810b900b145b8015612a52575061066f8f601181101561000257601102016000508e6011811015610002570180548290811015610002576000918252602082200154620100009004810b900b88836008811015610002570154620100009004600090810b900b145b15612a945760009850612c03565b8360011415612bfe5760019850612c03565b60088260ff1610158015612a865750836001145b15612bf25760019850612c03565b836000148015612aa75750855460ff8316105b8015612b08575061066f8f601181101561000257601102016000508e6011811015610002570180548290811015610002576000918252602082200154875490820b90910b9087908490811015610002576000918252602082200154810b900b145b8015612b73575061066f8f601181101561000257601102016000508e60118110156100025701805482908110156100025760009182526020822001548754610100909104820b90910b90879084908110156100025760009182526020822001546101009004810b900b145b8015612be0575061066f8f601181101561000257601102016000508e6011811015610002570180548290811015610002576000918252602082200154875462010000909104820b90910b9087908490811015610002576000918252602082200154620100009004810b900b145b15612bea57600193505b600101612905565b600191909101906128f6565b600098505b50505050505050509695505050505050565b60018460118110156100025760550201836011811015610002576005020160010180546000198101808355909190828015829011612c6457600083815260209020612c6491810190830161097d565b5050505060016000508460118110156100025760550201836011811015610002576005020160020180546000198101808355909190828015829011612cba57600083815260209020612cba91810190830161097d565b505050506110a456

... which are very similar. Bytecode that similar means that whatever difference remains has to be very very basic (no additional functions or blocks of logic, likely a variable declaration or something).

var etheriaAddress = "0x0148368e9efd8d6a5dd56134cd2b3f941e10d953";
var abi = [
	{"constant":true,"inputs":[],"name":"getElevations","outputs":[{"name":"","type":"uint8[17][17]"}],"type":"function","payable":false,"stateMutability":"view"},
	{"constant":false,"inputs":[{"name":"col","type":"uint256"},{"name":"row","type":"uint256"}],"name":"initOccupado","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
	{"constant":true,"inputs":[{"name":"x","type":"int8"},{"name":"y","type":"int8"}],"name":"blockHexCoordsValid","outputs":[{"name":"","type":"bool"}],"type":"function","payable":false,"stateMutability":"view"},
	{"constant":true,"inputs":[{"name":"_b32","type":"bytes32"},{"name":"byteindex","type":"uint8"}],"name":"getUint8FromByte32","outputs":[{"name":"","type":"uint8"}],"type":"function","payable":false,"stateMutability":"view"},
	{"constant":false,"inputs":[{"name":"which","type":"uint8"},{"name":"occupies","type":"int8[3][8]"},{"name":"surroundedby","type":"int8[3][]"}],"name":"initBlockDef","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
	{"constant":false,"inputs":[{"name":"row","type":"uint8"},{"name":"_elevations","type":"uint8[17]"}],"name":"initializeTiles","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
	{"constant":false,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"}],"name":"makeOffer","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
	{"constant":true,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"}],"name":"getOfferers","outputs":[{"name":"","type":"address[]"}],"type":"function","payable":false,"stateMutability":"view"},
	{"constant":true,"inputs":[{"name":"coordx","type":"uint8"},{"name":"coordy","type":"uint8"},{"name":"which","type":"int8"},{"name":"x","type":"int8"},{"name":"y","type":"int8"},{"name":"z","type":"int8"}],"name":"touchesAndAvoidsOverlap","outputs":[{"name":"","type":"bool"}],"type":"function","payable":false,"stateMutability":"view"},
	{"constant":false,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"},{"name":"index","type":"uint256"},{"name":"block","type":"int8[5]"}],"name":"editBlock","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
	{"constant":false,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"}],"name":"farmTile","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
	{"constant":true,"inputs":[],"name":"getOwners","outputs":[{"name":"","type":"address[17][17]"}],"type":"function","payable":false,"stateMutability":"view"},
	{"constant":false,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"},{"name":"i","type":"uint8"}],"name":"acceptOffer","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
	{"constant":false,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"},{"name":"i","type":"uint8"}],"name":"rejectOffer","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
	{"constant":true,"inputs":[{"name":"which","type":"int8"},{"name":"x","type":"int8"},{"name":"y","type":"int8"}],"name":"wouldFallOutside","outputs":[{"name":"","type":"bool"}],"type":"function","payable":false,"stateMutability":"view"},
	{"constant":true,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"}],"name":"getOffers","outputs":[{"name":"","type":"uint256[]"}],"type":"function","payable":false,"stateMutability":"view"},
	{"constant":false,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"}],"name":"retractOffer","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
	{"constant":true,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"}],"name":"getBlocks","outputs":[{"name":"","type":"int8[5][]"}],"type":"function","payable":false,"stateMutability":"view"},
	{"inputs":[],"type":"constructor","payable":true,"stateMutability":"payable"},
	{"type":"fallback","payable":true,"stateMutability":"payable"}
];
var etheria = new web3.eth.Contract(abi, etheriaAddress)

*/

contract Etheria {
	
    uint8 mapsize = 17;
    Tile[17][17] tiles;
    address creator;
    
    struct Tile 
    {
    	uint8 elevation;
    	address owner;
    	address[] offerers;
    	uint[] offers;
    	int8[5][] blocks; //0 = which,1 = blockx,2 = blocky,3 = blockz, 4 = color
    	uint lastfarm;
    }
    
    function Etheria() {
    	creator = msg.sender;
    }
    
    function initializeTiles(uint8 row, uint8[17] _elevations)
    {
    	for(uint8 x = 0; x < mapsize; x++)
    		tiles[x][row].elevation = _elevations[x];
    }
    
    
    function getElevations() constant returns (uint8[17][17])
    {
        uint8[17][17] memory elevations;
        for(uint8 y = 0; y < mapsize; y++)
        {
        	for(uint8 x = 0; x < mapsize; x++)
        	{
        		elevations[x][y] = tiles[x][y].elevation; 
        	}	
        }	
    	return elevations;
    }
    
    function getOwners() constant returns(address[17][17])
    {
        address[17][17] memory owners;
        for(uint8 y = 0; y < mapsize; y++)
        {
        	for(uint8 x = 0; x < mapsize; x++)
        	{
        	    owners[x][y] = tiles[x][y].owner; 
        	}	
        }	
    	return owners;
    }
    
    function getUint8FromByte32(bytes32 _b32, uint8 byteindex) public constant returns(uint8) {
    	uint postheadchop;
    	if(byteindex == 0)
    		postheadchop = uint(_b32); 								//for byteindex 0, buint is just the input number. 16^64 is out of uint range, so this exception has to be made.
    	else
    		postheadchop = uint(_b32) % (16 ** (64 - (byteindex*2))); 				// @i=0 _b32=a1b2c3d4... postheadchop=a1b2c3d4, @i=1 postheadchop=b2c3d4, @i=2 postheadchop=c3d4
    	uint evenedout = postheadchop - (postheadchop % (16 ** (64 - 2 - (byteindex*2)))); 				// @i=0 evenedout=a1000000, @i=1 remainder=b20000, @i=2 remainder=c300
    	uint8 b = uint8(evenedout / (16 ** (64 - 2 - (byteindex*2)))); 					// @i=0 b=a1 (to uint), @i=1 b=b2, @i=2 b=c3
    	return b;
    }
    
    function farmTile(uint8 x, uint8 y)
    {
        if(tiles[x][y].owner != msg.sender)
            return;
        if((block.number - tiles[x][y].lastfarm) < 4320) // a day's worth of blocks hasn't passed yet. can only farm once a day. (Assumes block times of 20 seconds.)
        	return;
        bytes32 lastblockhash = block.blockhash(block.number - 1);
    	for(uint8 i = 0; i < 10; i++)
    	{
            tiles[x][y].blocks.length+=5;
    	    tiles[x][y].blocks[tiles[x][y].blocks.length - 1][0] = int8(getUint8FromByte32(lastblockhash,i) % 32); // which, guaranteed 0-31
    	    tiles[x][y].blocks[tiles[x][y].blocks.length - 1][1] = 0; // x
    	    tiles[x][y].blocks[tiles[x][y].blocks.length - 1][2] = 0; // y
    	    tiles[x][y].blocks[tiles[x][y].blocks.length - 1][3] = -1; // z
    	    tiles[x][y].blocks[tiles[x][y].blocks.length - 1][4] = 0; // color
    	}
    	tiles[x][y].lastfarm = block.number;
    }
    
    // NOTE: In this instance, block[0] is irrelevant. We can't change "which" type of block it is
    function editBlock(uint8 x, uint8 y, uint index, int8[5] block)  
    {
        if(tiles[x][y].owner != msg.sender)
            return;
        block[0] = tiles[x][y].blocks[index][0]; // can't change the which
        tiles[x][y].blocks[index] = block;
    	return;
    }
    
    function getBlocks(uint8 x, uint8 y) constant returns (int8[5][])
    {
    	return tiles[x][y].blocks;
    }
    
    // block edit validation
    
    
    
    // TODO:
    // DONE block texturing
    // DONE angle camera
    // DONE block edit validation coordinate constraints in JS
    // DONE block edit validation must touch, no overlap in JS
    // block edit validation coordinate constraints in solidity
    // block edit validation must touch, no overlap in solidity
    // DONE block lookup caching 
    // register name for owner
   
    // FULL GAME TODO:
    // Fitness vote
    // Cast threat
    // chat
    // messaging
    // block trading
    // reclamation
    // price modifier
    
    
    function makeOffer(uint8 x, uint8 y)
    {
    	if(msg.value < 10000000000000000 || msg.value > 1208925819614629174706175) // .01 ether up to (2^80 - 1) wei is the valid range
    	{
    		if(!(msg.value == 0))
    			msg.sender.send(msg.value); 		// return their money
    		return;
    	}
    	else if(tiles[x][y].elevation >= 125 && tiles[x][y].owner == address(0)) // if unowned and above sea level, accept offer of 1 ETH immediately
    	{
    		if(msg.value != 1000000000000000000) // 1 ETH is the starting value. If not enough or too much...
    		{
    			msg.sender.send(msg.value); 	 // return their money
        		return;
    		}	
    		else
    		{
    			creator.send(msg.value);     		 // this was a valid offer, send money to contract owner
    			tiles[x][y].owner = msg.sender;  // set tile owner to the buyer
    			return;		
    		}	
    	}	
    	else
    	{
    		if(tiles[x][y].offerers.length < 10) // this tile can only hold 10 offers at a time
    		{
    			for(uint8 i = 0; i < tiles[x][y].offerers.length; i++)
    			{
    				if(tiles[x][y].offerers[i] == msg.sender) // user has already made an offer. Update it and return;
    				{
    					msg.sender.send(tiles[x][y].offers[i]); // return their previous money
    					tiles[x][y].offers[i] = msg.value; // set the new offer
    					return;
    				}
    			}	
    			// the user has not yet made an offer
    			tiles[x][y].offerers.length++; // make room for 1 more
    			tiles[x][y].offers.length++; // make room for 1 more
    			tiles[x][y].offerers[tiles[x][y].offerers.length - 1] = msg.sender; // record who is making the offer
    			tiles[x][y].offers[tiles[x][y].offers.length - 1] = msg.value; // record the offer
    		}	
    	}
    }
    
    function retractOffer(uint8 x, uint8 y) // retracts the first offer in the array by this user.
    {
        for(uint8 i = 0; i < tiles[x][y].offerers.length; i++)
    	{
    		if(tiles[x][y].offerers[i] == msg.sender) // this user has an offer on file. Remove it.
    			removeOffer(x,y,i);
    	}	
    }
    
    function rejectOffer(uint8 x, uint8 y, uint8 i) // index 0-10
    {
    	if(tiles[x][y].owner != msg.sender) // only the owner can reject offers
    		return;
    	removeOffer(x,y,i);
		return;
    }
    
    function removeOffer(uint8 x, uint8 y, uint8 i) private // index 0-10, can't be odd
    {
    	// return the money
        tiles[x][y].offerers[i].send(tiles[x][y].offers[i]);
    			
    	// delete user and offer and reshape the array
    	delete tiles[x][y].offerers[i];   // zero out user
    	delete tiles[x][y].offers[i];   // zero out offer
    	for(uint8 j = i+1; j < tiles[x][y].offerers.length; j++) // close the arrays after the gap
    	{
    	    tiles[x][y].offerers[j-1] = tiles[x][y].offerers[j];
    	    tiles[x][y].offers[j-1] = tiles[x][y].offers[j];
    	}
    	tiles[x][y].offerers.length--;
    	tiles[x][y].offers.length--;
    	return;
    }
    
    function acceptOffer(uint8 x, uint8 y, uint8 i) // accepts the offer at index (1-10)
    {
    	tiles[x][y].owner.send(tiles[x][y].offers[i]); // send offer money to oldowner
    	tiles[x][y].owner = tiles[x][y].offerers[i]; // new owner is the offerer
    	delete tiles[x][y].offerers; // delete all offerers
    	delete tiles[x][y].offers; // delete all offers
    	return;
    }
    
    function getOfferers(uint8 x, uint8 y) constant returns (address[])
    {
    	return tiles[x][y].offerers;
    }
    
    function getOffers(uint8 x, uint8 y) constant returns (uint[])
    {
    	return tiles[x][y].offers;
    }
    
    Block[20] blocks;
    struct Block
    {
    	uint8 which;
    	int8[3][8] occupies; // [x,y,z] 8 times
    	int8[3][] surroundedby; // [x,y,z]
    }
    
    function initBlockDef(uint8 which, int8[3][8] occupies, int8[3][] surroundedby)
    {
    	blocks[which].which = which;
    	for(uint8 o = 0; o < 8; o++)
    	{	
    		for(uint8 i = 0; i < 3; i++)
    		{
    			blocks[which].occupies[o][i] = occupies[o][i];
    		}
    	}
    	blocks[which].surroundedby.length = surroundedby.length;
    	for(uint8 oo = 0; oo < surroundedby.length; oo++)
    	{	
    		for(uint8 ii = 0; ii < 3; ii++)
    		{
    			blocks[which].surroundedby[oo][ii] = surroundedby[oo][ii];
    		}
    	}
    }
        
    int8[3][][17][17] occupado; 
    
    function initOccupado(uint col, uint row)
    {
    	int8 x;
    	int8 y;
    	for(y = -66; y <= 66; y++)
		{
			if(y % 2 != 0 ) // odd
				x = -50;
			else
				x = -49;
			
			if(y >= -33 && y <= 33)
			{
				for(x; x <= 49; x++)
				{
					occupado[col][row].length++;// = occupado[col][row].length+1;
					occupado[col][row][occupado[col][row].length-1][0] = x;
					occupado[col][row][occupado[col][row].length-1][1] = y;
					occupado[col][row][occupado[col][row].length-1][2] = -1;
					//occupado[col][row][occupado[col][row].length-1] = [x,y,-1]);
				}
			}	
			else
			{	
				int8 absx;
				int8 absy;
				for(x; x <= 49; x++)
				{
					absx = x;
					if(absx < 0)
						absx = absx*-1;
					absy = y;
					if(absy < 0)
						absy = absy*-1;
					if((y >= 0 && x >= 0) || (y < 0 && x > 0)) // first or 4th quadrants
					{
						if(y % 2 != 0 ) // odd
						{
							if (((absx/3) + (absy/2)) <= 33)
							{
								occupado[col][row].length++;
								occupado[col][row][occupado[col][row].length-1][0] = x;
					            occupado[col][row][occupado[col][row].length-1][1] = y;
					            occupado[col][row][occupado[col][row].length-1][2] = -1;
//								occupado[col][row].push([x,y,-1]);
							}
						}	
						else	// even
						{
							if ((((absx+1)/3) + ((absy-1)/2)) <= 33)
							{
								occupado[col][row].length++;
								occupado[col][row][occupado[col][row].length-1][0] = x;
					            occupado[col][row][occupado[col][row].length-1][1] = y;
					            occupado[col][row][occupado[col][row].length-1][2] = -1;
								//occupado[col][row].push([x,y,-1]);
							}
						}
					}
					else
					{	
						if(y % 2 == 0 ) // even
						{
							if (((absx/3) + (absy/2)) <= 33)
							{
								occupado[col][row].length++;
								occupado[col][row][occupado[col][row].length-1][0] = x;
					            occupado[col][row][occupado[col][row].length-1][1] = y;
					            occupado[col][row][occupado[col][row].length-1][2] = -1;
								//occupado[col][row].push([x,y,-1]);
							}
						}	
						else	// odd
						{
							if ((((absx+1)/3) + ((absy-1)/2)) <= 33)
							{
								occupado[col][row].length++;
								occupado[col][row][occupado[col][row].length-1][0] = x;
					            occupado[col][row][occupado[col][row].length-1][1] = y;
					            occupado[col][row][occupado[col][row].length-1][2] = -1;
								//occupado[col][row].push([x,y,-1]);
							}
						}
					}
				}
			}
		}	
    }
    
    // NEEDS NO INFORMATION FROM MAP... COULD BE PLACED IN ANOTHER CONTRACT
    function blockHexCoordsValid(int8 x, int8 y) constant returns (bool)
    {
    	if(-33 <= y && y <= 33)
    	{
    		if(y % 2 != 0 ) // odd
    		{
    			if(-50 <= x && x <= 49)
    				return true;
    		}
    		else // even
    		{
    			if(-49 <= x && x <= 49)
    				return true;
    		}	
    	}	
    	else
    	{	
    		int8 absx;
			int8 absy;
			absx = x;
			if(absx < 0)
				absx = absx*-1;
			absy = y;
			if(absy < 0)
				absy = absy*-1;
    		if((y >= 0 && x >= 0) || (y < 0 && x > 0)) // first or 4th quadrants
    		{
    			if(y % 2 != 0 ) // odd
    			{
    				if (((absx/3) + (absy/2)) <= 33)
    					return true;
    			}	
    			else	// even
    			{
    				if ((((absx+1)/3) + ((absy-1)/2)) <= 33)
    					return true;
    			}
    		}
    		else
    		{	
    			if(y % 2 == 0 ) // even
    			{
    				if (((absx/3) + (absy/2)) <= 33)
    					return true;
    			}	
    			else	// odd
    			{
    				if ((((absx+1)/3) + ((absy-1)/2)) <= 33)
    					return true;
    			}
    		}
    	}
    	return false;
    }
    
    function wouldFallOutside(int8 which, int8 x, int8 y) constant returns (bool)
    {
    	int8 occupiesx = 0;
    	int8 occupiesy = 0;
    	
    	for(uint8 b = 0; b < 8; b++) // always 8 hexes
    	{
    		occupiesx = blocks[uint(which)].occupies[b][0];
    		occupiesy = blocks[uint(which)].occupies[b][1];
    		if(y % 2 != 0 && occupiesy%2 != 0) // if y is odd, offset the x by 1
    		{
    			occupiesx = occupiesx + 1;
    		}
    		if(!blockHexCoordsValid(occupiesx+x, occupiesy+y))
    			return true;
    	}
    	return false;
    }
    
    function touchesAndAvoidsOverlap(uint8 coordx, uint8 coordy, int8 which, int8 x, int8 y, int8 z) constant returns (bool)
    {
    	int8[3][8] wouldoccupy = blocks[uint(which)].occupies;
    	for(uint8 b = 0; b < 8; b++) // always 8 hexes
    	{
    		wouldoccupy[b][0] = wouldoccupy[b][0]+x;
    		wouldoccupy[b][1] = wouldoccupy[b][1]+y;
    		if(y % 2 != 0 && wouldoccupy[b][1]%2 != 0)
    			wouldoccupy[b][0] = wouldoccupy[b][0]+1; // anchor y and this hex y are both odd, offset by +1
    		wouldoccupy[b][2] = wouldoccupy[b][2]+z;
    	}
    	
    	int8[3][] surroundings = blocks[uint(which)].surroundedby;
    	for(uint8 bb = 0; bb < surroundings.length; bb++)
    	{
    		surroundings[b][0] = surroundings[b][0]+x;
    		surroundings[b][1] = surroundings[b][1]+y;
    		if(y % 2 != 0 && surroundings[b][1]%2 != 0)
    			surroundings[b][0] = surroundings[b][0]+1; // anchor y and this hex y are both odd, offset by +1
    		surroundings[b][2] = surroundings[b][2]+z;
    	}
    	
    	bool touches;
    	uint numloops = 8;
    	if(surroundings.length > 8)
    		numloops = surroundings.length;
    	
    	for(uint8 l = 0; l < numloops; l++)
    	{
    		for(uint o = 0; o < occupado[coordx][coordy].length; o++)
    		{
    			if(l < 8 && wouldoccupy[l][0] == occupado[coordx][coordy][o][0] && wouldoccupy[l][1] == occupado[coordx][coordy][o][1] && wouldoccupy[l][2] == occupado[coordx][coordy][o][2]) // are the arrays equal?
					return false; // this hex conflicts. The proposed block does not avoid overlap. Return false immediately.
    			if(touches == false && l < surroundings.length && surroundings[l][0] == occupado[coordx][coordy][o][0] && surroundings[l][1] == occupado[coordx][coordy][o][1] && surroundings[l][2] == occupado[coordx][coordy][o][2]) // are the arrays equal?
    				touches = true;
    		}
    		if(l >= 8 && touches == true)
    			return true;
    	}	
    	if(touches == true)
    		return true;
    	else
    		return false;
    }
}